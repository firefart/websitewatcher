// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package sqlc

import (
	"context"
)

const deleteWatch = `-- name: DeleteWatch :exec
DELETE
FROM watches
WHERE id = ?
`

func (q *Queries) DeleteWatch(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteWatch, id)
	return err
}

const getAllWatches = `-- name: GetAllWatches :many
SELECT id, name, url, last_fetch, last_content
FROM watches
order by id
`

func (q *Queries) GetAllWatches(ctx context.Context) ([]Watch, error) {
	rows, err := q.db.QueryContext(ctx, getAllWatches)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Watch
	for rows.Next() {
		var i Watch
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Url,
			&i.LastFetch,
			&i.LastContent,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWatchByNameAndUrl = `-- name: GetWatchByNameAndUrl :one
SELECT id, name, url, last_fetch, last_content
FROM watches
WHERE name = ?
  AND url = ?
`

type GetWatchByNameAndUrlParams struct {
	Name string
	Url  string
}

func (q *Queries) GetWatchByNameAndUrl(ctx context.Context, arg GetWatchByNameAndUrlParams) (Watch, error) {
	row := q.db.QueryRowContext(ctx, getWatchByNameAndUrl, arg.Name, arg.Url)
	var i Watch
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.LastFetch,
		&i.LastContent,
	)
	return i, err
}

const insertWatch = `-- name: InsertWatch :one
INSERT INTO watches(name, url, last_fetch, last_content)
VALUES (?, ?, CURRENT_TIMESTAMP, ?)
RETURNING id, name, url, last_fetch, last_content
`

type InsertWatchParams struct {
	Name        string
	Url         string
	LastContent []byte
}

func (q *Queries) InsertWatch(ctx context.Context, arg InsertWatchParams) (Watch, error) {
	row := q.db.QueryRowContext(ctx, insertWatch, arg.Name, arg.Url, arg.LastContent)
	var i Watch
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.LastFetch,
		&i.LastContent,
	)
	return i, err
}

const updateWatch = `-- name: UpdateWatch :one
UPDATE watches
SET last_fetch=CURRENT_TIMESTAMP,
    last_content=?
WHERE id = ?
RETURNING id, name, url, last_fetch, last_content
`

type UpdateWatchParams struct {
	LastContent []byte
	ID          int64
}

func (q *Queries) UpdateWatch(ctx context.Context, arg UpdateWatchParams) (Watch, error) {
	row := q.db.QueryRowContext(ctx, updateWatch, arg.LastContent, arg.ID)
	var i Watch
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.LastFetch,
		&i.LastContent,
	)
	return i, err
}
